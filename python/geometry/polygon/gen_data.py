#!/usr/bin/python3
import yaml
import math,random
import numpy as np
import numpy.linalg as la
from pca2 import TPCA

def To2d(points):
  pca= TPCA(points,calc_projected=True)
  return pca.Projected[:,[0,1]]

def To2d2(points):
  return np.array([[p[0],p[1]] for p in points])


def Gen3d_01():
  points= yaml.load(open('../data/polygon.yaml').read(),Loader=yaml.SafeLoader)['polygon']
  return points

def Gen3d_02():
  points= yaml.load(open('../data/polygon2.yaml').read(),Loader=yaml.SafeLoader)['polygon']
  return points

def Gen3d_11(dense=0.05, seed=None):
  random.seed(seed)
  theta= 0.0
  points= []
  while theta<2.0*math.pi:
    p= [0]*3
    p[0]= 1.0+(0.5+0.2*random.random())*math.cos(theta)
    p[1]= 1.0+(0.7+0.3*random.random())*math.sin(theta)
    p[2]= 1.0+0.2*p[1]+0.2*random.random()
    points.append(p)
    if theta<0.25*math.pi:
      theta+= 0.1*dense
    else:
      theta+= 0.1
  return points

def Gen3d_12(dense=0.05, seed=None):
  random.seed(seed)
  theta= 1.5*math.pi
  points= []
  while theta<3.0*math.pi:
    p= [0]*3
    p[0]= 1.0+(0.5+0.2*random.random())*math.cos(theta)
    p[1]= 1.0+(0.7+0.3*random.random())*math.sin(theta)
    p[2]= 1.0+0.2*p[1]+0.2*random.random()
    points.append(p)
    if theta<0.25*math.pi:
      theta+= 0.1*dense
    else:
      theta+= 0.1
  return points

def Gen3d_13(dense=0.05, seed=None):
  random.seed(seed)
  theta= 0.0
  points= []
  while theta<2.0*math.pi:
    p= [0]*3
    p[0]= (0.5+0.2*random.random())*math.cos(theta)
    p[1]= (0.7+0.3*random.random())*math.sin(theta)
    p[2]= 1.0+0.2*random.random()
    points.append(p)
    if theta<0.25*math.pi:
      theta+= 0.1*dense
    else:
      theta+= 0.1
  return points

def Gen3d_14(dense=0.05, seed=None):
  random.seed(seed)
  theta= 0.0
  points= []
  grad= 1.0*(-0.5+random.random())
  while theta<2.0*math.pi:
    p= [0]*3
    p[0]= (0.5+0.2*random.random())*math.cos(theta)
    p[1]= grad*p[0]+(0.7+0.3*random.random())*math.sin(theta)
    p[2]= grad*p[0]+grad*p[1]+1.0+0.2*random.random()
    points.append(p)
    if theta<0.25*math.pi:
      theta+= 0.1*dense
    else:
      theta+= 0.1
  return points

def Gen3d_15(dense=0.05, seed=None):
  random.seed(seed)
  points = []
  grad = 1.0 * (-0.5 + random.random())        # tilt in z
  theta_rot = random.uniform(0, math.pi)       # rotation angle around z-axis

  ca, sa = math.cos(theta_rot), math.sin(theta_rot)
  rect = [(-1.0, -0.5), (1.0, -0.5), (1.0, 0.5), (-1.0, 0.5)]
  step = 0.05 * (0.2 + dense)

  for i in range(4):
    x0, y0 = rect[i]
    x1, y1 = rect[(i + 1) % 4]
    t = 0.0
    while t <= 1.0:
      # interpolate along edge
      x = x0 + (x1 - x0) * t + 0.3 * random.random()
      y = y0 + (y1 - y0) * t + 0.3 * random.random()
      # rotate around z-axis
      xr = ca * x - sa * y
      yr = sa * x + ca * y
      # add tilt in z
      z = grad * xr + grad * yr + 1.0 + 0.1 * random.random()
      points.append([xr, yr, z])
      t += step * (dense if (i==0 and 0.8<t or i==1 and t<0.2) else 1.0)
  return points


def DataSelector(data, *index):
  # Case 1: no index â†’ default = 'rand'
  if len(index) == 0:
    index = ['rand']

  # Case 2: single argument
  if len(index) == 1:
    idx = index[0]
    if isinstance(idx, int):
      return data[idx]
    if idx == 'rand':
      return random.choice(data)
    if idx == 'all':
      return data
    raise ValueError(f"Invalid index: {idx}")

  # Case 3: range (start, end)
  if len(index) == 2:
    start = index[0] if index[0] is not None else 0
    end = index[1] if index[1] is not None else len(data)
    return data[start:end]

  raise ValueError(f"Too many indices: {index}")

def Gen2d_01(*index):
  polygons=[
    [[0.744, 0.54], [0.532, 1.124], [1.12, 0.996], [1.324, 1.432], [1.608, 1.12], [2.04, 0.632], [1.464, 0.696], [1.224, 0.328], [1.16, 0.7]],
    [[0.784, 0.58], [1.172, 1.096], [1.72, 0.524], [1.724, 1.496], [0.84, 1.516]],
    [[0.704, 0.748], [1.18, 0.42], [1.516, 0.704], [1.416, 0.936], [1.028, 1.052], [0.876, 1.384], [1.476, 1.28], [1.932, 1.012], [2.056, 1.436], [1.172, 1.752], [0.48, 1.62], [0.364, 1.064]],
    [[0.556, 0.764], [0.952, 0.316], [1.988, 0.368], [2.152, 0.668], [2.012, 0.928], [1.484, 0.872], [1.228, 0.936], [1.2, 1.156], [1.36, 1.312], [1.952, 1.328], [2.24, 1.432], [2.1, 1.648], [1.632, 1.844], [1.016, 1.812], [0.552, 1.492], [0.776, 1.324], [0.812, 1.068], [0.524, 0.952]],
    [[0.504, 0.724], [0.908, 0.296], [1.7, 0.304], [1.996, 0.668], [1.98, 0.872], [1.8, 0.996], [1.396, 0.984], [1.232, 1.296], [1.732, 1.484], [1.892, 1.792], [1.088, 1.756], [0.396, 1.5], [0.684, 1.26], [0.728, 0.98]],
    [[0.729,0.049],[0.723,0.082],[0.702,0.125],[0.682,0.124],[0.654,0.106],[0.656,0.101],[0.647,0.081],[0.652,0.078],[0.651,0.071],[0.655,0.071],[0.673,0.031]],
    [[0.722,0.219],[0.717,0.220],[0.712,0.229],[0.693,0.235],[0.681,0.227],[0.672,0.230],[0.649,0.211],[0.637,0.213],[0.629,0.208],[0.626,0.216],[0.620,0.202],[0.616,0.203],[0.617,0.207],[0.609,0.200],[0.603,0.201],[0.601,0.191],[0.587,0.181],[0.589,0.175],[0.580,0.166],[0.585,0.133],[0.593,0.121],[0.605,0.113],[0.626,0.113],[0.645,0.121],[0.644,0.127],[0.651,0.123],[0.661,0.135],[0.669,0.134],[0.675,0.140],[0.702,0.148],[0.715,0.159],[0.717,0.150],[0.720,0.149],[0.721,0.167],[0.727,0.167],[0.730,0.195],[0.724,0.204]],
    [[0.820,0.156],[0.793,0.154],[0.812,0.154],[0.812,0.150],[0.803,0.149],[0.806,0.134],[0.802,0.139],[0.796,0.133],[0.786,0.140],[0.779,0.139],[0.772,0.131],[0.774,0.126],[0.782,0.127],[0.779,0.134],[0.789,0.130],[0.788,0.115],[0.794,0.109],[0.773,0.111],[0.769,0.124],[0.755,0.143],[0.749,0.144],[0.753,0.150],[0.750,0.153],[0.737,0.147],[0.731,0.149],[0.738,0.141],[0.722,0.144],[0.722,0.124],[0.726,0.126],[0.729,0.123],[0.725,0.118],[0.733,0.107],[0.733,0.090],[0.738,0.086],[0.738,0.077],[0.740,0.082],[0.744,0.080],[0.749,0.041],[0.757,0.039],[0.758,0.032],[0.763,0.034],[0.762,0.040],[0.769,0.037],[0.769,0.008],[0.781,0.024],[0.778,0.034],[0.788,0.043],[0.828,0.144],[0.819,0.150]],
    #[[0.6,0.05],[0.65,0.05],[0.65,0.1],[0.6,0.1]],
    #[[0.6,0.15],[0.6,0.2],[0.65,0.15],[0.65,0.2]],
    #[[0.65,0.05],[0.7,0.05],[0.7,0.1]],
    #[[0.6,0.05],[0.6,0.1],[0.65,0.05],[0.65,0.1]],
    ]
  return DataSelector(polygons, *index)

def Gen2d_02(*index):
  polygons=[
    [[422.84861231767934, 183.35433718765748], [432.42098791122203, 185.66463484510922], [448.80873543846809, 198.35756013846091], [462.41213465470298, 213.99776957705564], [465.26249879343175, 223.42344059012029], [455.69012319988906, 221.11314293266855], [439.302375672643, 208.42021763931686], [425.69897645640816, 192.78000820072214], [413.36813181074763, 182.20417128937467], [429.19778386994096, 178.49865945853901], [453.73091707592442, 189.37350645742433], [472.59635472413851, 208.45837440281599], [474.74297930036346, 224.5736064884031], [458.91332724117012, 228.27911831923876], [434.38019403518666, 217.40427132035344], [415.51475638697258, 198.31940337496178], [396.04237982107253, 168.20574039810251], [420.03259937610784, 164.96296341337927], [458.09514085276896, 184.22957242547176], [487.93348367241646, 214.71944917603588], [492.06873129003856, 238.57203737967527], [468.07851173500325, 241.8148143643985], [430.01597025834212, 222.54820535230601], [400.17762743869463, 192.05832860174189]],
    [[483.57791609605795, 344.49965272380518], [466.60343635334158, 338.83882694650532], [456.56851292732165, 319.65287948322805], [459.35146786358513, 298.18067815098351], [473.32208390394203, 287.00034727619482], [490.2965636466584, 292.66117305349468], [500.33148707267833, 311.84712051677195], [497.54853213641485, 333.31932184901649], [378.72596159571577, 294.20724282596018], [415.27773620874092, 266.52403561553331], [488.83496618487482, 267.67673072063207], [556.30882381469496, 296.99009498197074], [578.17403840428415, 337.29275717403982], [541.62226379125912, 364.97596438446669], [468.06503381512516, 363.82326927936793], [400.59117618530496, 334.50990501802926], [351.28732841376109, 288.63217779178427], [402.34876578708764, 231.78625395704097], [497.98927404900689, 224.12515380661273], [582.18394057194246, 270.13664590592191], [605.61267158623889, 342.86782220821573], [554.55123421291239, 399.71374604295903], [458.91072595099308, 407.37484619338727], [374.71605942805752, 361.36335409407809], [347.09013789669746, 223.94559624794104], [432.07848968166377, 184.27923831751852], [544.23064330338764, 221.62666952517262], [617.84938821961384, 314.11027118925574], [609.80986210330252, 407.55440375205899], [524.82151031833621, 447.22076168248151], [412.66935669661234, 409.87333047482741], [339.05061178038613, 317.38972881074426], [324.47896703995247, 268.67011748046099], [395.69108564781953, 197.05229911101293], [515.38225387592058, 194.96598409982846], [613.43900867251352, 263.63330748507695], [632.42103296004757, 362.82988251953901], [561.2089143521805, 434.44770088898707], [441.51774612407945, 436.53401590017154], [343.46099132748645, 367.8666925149231], [399.79017895955246, 470.93958277112137], [327.23470482198888, 377.03236326086932], [343.25909976145329, 247.22676648667471], [438.4764905512302, 157.56115056692747], [557.10982104044751, 160.56041722887863], [629.66529517801121, 254.46763673913068], [613.64090023854669, 384.27323351332524], [518.42350944876966, 473.93884943307251], [378.31960574211183, 483.21973685897842], [313.07435158356498, 377.62379407282771], [344.70390938112109, 235.78302187429452], [454.68011314883546, 140.78582091980701], [578.58039425788809, 148.28026314102161], [643.82564841643489, 253.87620592717229], [612.19609061887888, 395.7169781257054], [502.21988685116457, 490.71417908019293], [318.63430757546553, 442.82141793822223], [289.82701239800645, 310.5017396194778], [371.51250518246297, 181.25642105277791], [515.84053210483023, 130.79561698126417], [638.26569242453445, 188.67858206177775], [667.07298760199353, 320.9982603805222], [585.387494817537, 450.24357894722209], [441.0594678951698, 500.70438301873588]],
    ]
  return DataSelector(polygons, *index)



if __name__=='__main__':
  #points= Gen3d_01()
  #points= Gen3d_02()
  points= Gen3d_11()
  #points= Gen3d_12()
  #points= Gen3d_13()

  #points= To2d(Gen3d_01())
  #points= To2d(Gen3d_02())
  #points= To2d(Gen3d_11())
  #points= To2d(Gen3d_12())
  #points= To2d(Gen3d_13())

  fp= open('/tmp/orig.dat','w')
  for p in points:
    fp.write(' '.join(map(str,p))+'\n')
  fp.close()

  print('Plot by')
  if len(points[0])==2:
    print("qplot -x /tmp/orig.dat w l")
  elif len(points[0])==3:
    print("qplot -x -3d -s 'set ticslevel 0' /tmp/orig.dat w l")

