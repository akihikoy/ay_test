#!/usr/bin/python3
#\file    plan_2d_feat.py
#\brief   Convert grasp surface polygon to feature vector for learning.
#         No spline version.
#\author  Akihiko Yamaguchi, info@akihikoy.net
#\version 0.1
#\date    May.29, 2017
import numpy as np
from splines.cubic_hermite_spline import TCubicHermiteSpline

'''Convert grasp surface polygon to feature vector for learning.
    w_finger: Finger dimension. '''
def PolygonToSurfaceFeat(polygon, w_finger, num=9):
  #Change start point of polygon:
  def gety(p1,p2,x):
    if abs(p2[0]-p1[0])<1.0e-6:  return 0.5*(p2[1]+p1[1])
    return (p2[1]-p1[1])/(p2[0]-p1[0]) * (x-p1[0]) + p1[1]
  def get_feat(points, is_upper):
    xmin= np.min(points,axis=0)[0]
    xmax= np.max(points,axis=0)[0]
    feat= []
    segments= list(zip(points,points[1:]+[points[0]]))
    for x in np.mgrid[-0.499*w_finger[0]:0.499*w_finger[0]:num*1j]:
      if x<xmin or x>xmax:  feat.append([x,-0.1 if is_upper else 0.1])
      else:
        y_s= [gety(p1,p2,x) for p1,p2 in segments if (p1[0]<=x and x<=p2[0]) or (p2[0]<=x and x<=p1[0])]
        if is_upper:  feat.append([x,max(y_s)])
        else:         feat.append([x,min(y_s)])
    return feat

  feat1= get_feat(polygon, is_upper=True)
  feat2= get_feat(polygon, is_upper=False)
  return feat1+feat2

def Main():
  #polygon is obtained by TGraspPlanningScene().Evaluate(p_grasp)['lps_ing_obj']
  #polygon= [[0.02250000000000016, 0.03930382443834195], [-0.003290626669648233, 0.04959789330667163], [-0.021957423486490466, 0.049497413178730104], [-0.020668121534636333, 0.030722896579375318], [-0.022500000000000145, 0.02746341855873208], [-0.02250000000000013, 0.014768522919809221], [-0.004832145186925384, -0.0011258426224542365], [0.022500000000000013, -0.0020902717852315108]]

  #polygon= [[-0.023,0.028],[-0.019,0.018],[-0.012,0.024],[0.013,0.022],[0.014,0.017],[-0.003,0.010],[0.002,-0.007],[-0.006,-0.027],[-0.023,-0.027]]
  #polygon= [[0.003,-0.014],[0.016,0.028],[0.023,0.020],[0.022,-0.040],[0.006,-0.042],[0.000,-0.023],[-0.009,-0.023]]
  #polygon= [[0.010,-0.020],[0.022,-0.000],[0.021,0.021],[-0.013,0.050],[-0.013,0.026],[-0.022,0.022],[-0.022,-0.006],[-0.015,-0.010],[-0.010,-0.022],[-0.000,-0.016]]
  #polygon= [[-0.023,0.013],[0.002,0.026],[0.012,0.022],[0.021,0.002],[0.012,0.001],[0.014,-0.009],[0.021,-0.009],[0.023,-0.015],[0.023,-0.028],[0.016,-0.023],[-0.002,-0.037],[-0.023,-0.030]]
  #polygon= [[-0.011,-0.047],[0.017,-0.005],[0.008,0.025],[-0.022,0.040],[-0.023,0.034],[-0.023,-0.015],[-0.011,-0.018],[-0.010,-0.036],[-0.016,-0.045]]
  #polygon= [[-0.008,0.020],[-0.001,0.008],[-0.013,-0.019],[-0.006,-0.036],[0.022,-0.037],[0.023,-0.038],[0.023,-0.002],[0.020,0.000],[0.023,0.001],[0.023,0.014],[0.012,0.012]]
  #polygon= [[0.023,0.015],[0.009,0.015],[0.012,0.033],[0.008,0.039],[-0.009,0.008],[-0.002,0.006],[-0.001,-0.002],[-0.008,-0.006],[-0.013,-0.002],[-0.010,-0.014],[-0.001,-0.008],[0.001,-0.017],[0.007,-0.017],[-0.003,-0.029],[0.006,-0.033],[0.015,-0.021],[0.014,-0.034],[0.020,-0.033],[0.023,-0.035]]
  #polygon= [[0.005,0.013],[-0.006,-0.007],[0.009,-0.027],[0.005,-0.041],[-0.009,-0.049],[-0.023,-0.048],[-0.023,-0.000],[-0.022,-0.001],[0.000,0.019]]
  #polygon= [[0.023,-0.046],[0.023,0.016],[-0.001,0.015],[-0.017,0.024],[-0.021,0.019],[-0.012,0.017],[-0.008,0.008],[-0.020,-0.004],[-0.016,-0.030],[-0.007,-0.040],[0.016,-0.033]]
  #polygon= [[0.023,0.006],[-0.008,0.008],[-0.019,-0.011],[-0.023,-0.011],[-0.022,-0.019],[-0.017,-0.019],[-0.015,-0.035],[-0.004,-0.049],[0.020,-0.048],[0.023,-0.045]]
  #polygon= [[0.023,-0.030],[0.023,0.026],[0.018,0.031],[0.009,0.025],[0.001,0.028],[-0.007,0.040],[-0.020,0.001],[-0.011,-0.021],[-0.001,-0.028],[0.011,-0.024]]
  #polygon= [[0.022,0.004],[0.020,0.004],[-0.009,0.019],[0.008,-0.004],[-0.001,-0.007],[-0.005,-0.023],[0.001,-0.045],[0.008,-0.050],[0.022,-0.049]]
  #polygon= [[0.022,-0.040],[0.022,0.000],[0.017,0.018],[0.004,0.017],[-0.013,0.004],[-0.022,0.003],[-0.022,-0.008],[-0.022,-0.008],[-0.022,-0.010],[-0.022,-0.029],[-0.008,-0.049],[0.018,-0.037]]
  #polygon= [[0.022,0.050],[0.014,0.046],[-0.008,0.048],[-0.023,0.043],[-0.023,0.019],[-0.014,0.007],[-0.012,-0.023],[-0.006,-0.004],[0.016,-0.006],[0.022,-0.001]]
  #polygon= [[0.022,0.048],[-0.009,0.038],[0.003,0.027],[-0.006,0.014],[0.015,-0.011],[0.022,-0.011]]
  #polygon= [[0.022500000000000006, -0.037541262786145405], [0.016516860487828647, -0.040081458863337624], [-0.008825324357486272, -0.03975948484903721], [-0.015582655826775522, -0.043317359413176965], [-0.022192838440299185, -0.04032478764029151], [-0.02249999999999998, -0.04052397240385208], [-0.022500000000000058, 0.03299817295938004], [-0.022026780623685238, 0.033122965387296324], [-0.012244817407781087, 0.02820430747657527], [0.012591800922777969, 0.038404424627968024], [0.019528341221562363, 0.03342603044074861], [0.02250000000000002, 0.03430389557517928]]
  #polygon= [[0.022499999999999992, -0.00025780267321809033], [0.012530831081980436, -0.0006733126321244896], [-0.0225, 0.004008395610238727], [-0.022500000000000013, -0.040533568494354716], [-0.013047025963346797, -0.03864946209662318], [0.007207952454395702, -0.022315577341018765], [0.022500000000000003, -0.04089476529274074]]
  #polygon= [[0.022499999999999614, 0.0069979261869305785], [-0.009138034214217827, -0.020794495160664228], [-0.00561141139444818, -0.028073564316844008], [0.011874683388431978, -0.03603613113390313], [0.01747772612823914, -0.04502330005314507], [0.02249999999999957, -0.04280791295683648]]
  #polygon= [[-0.022499999999999805, -0.03079293824807413], [0.008307701849726689, -0.041580311661123505], [0.022500000000000093, -0.049967419369178846], [0.02249999999999998, -0.01915320635587759], [0.013471528762861333, -0.024087509896815816], [0.0053348591199934405, 0.004261326065547697], [-0.021549132352616393, 0.016852845713883454], [-0.022499999999999735, 0.01666006672432078]]
  #polygon= [[0.022499999999999624, 0.014721580848192785], [-0.0036343473732008847, 0.015186657493631572], [-0.009644307461470731, 0.010635670607017901], [-0.0015802974183547992, -0.010471215149580809], [-0.005865750442236627, -0.01822698186042595], [0.009192379517686186, -0.02876601193335471], [0.022499999999999742, -0.030676780136362734]]
  polygon= [[-0.0225,0.0337101038744],[-0.0151196521362,0.0376297685348],[0.00318808074131,0.029766759131],[0.00726658923707,0.0203134121867],[0.012142090809,0.0188202663728],[0.0126377790737,0.0036956409842],[0.0177113127108,-0.00585733009466],[0.0119367615202,-0.0334191616475],[0.00596661067235,-0.0328214168403],[0.00317835110957,-0.0506322452492],[0.000292899820192,-0.0493383477043],[-0.000800533251667,-0.0401838731636],[-0.0148317255684,-0.049834035969],[-0.0225,-0.0512950114837],]

  #idx_xmax= np.argmax(polygon,axis=0)[0]
  #polygon= polygon[idx_xmax:] + polygon[:idx_xmax]

  #Finger dimension:
  w_finger= [0.045, 0.02]
  feat= PolygonToSurfaceFeat(polygon, w_finger, num=21)
  #print [p[1] for p in feat]
  #feat= [[p[0],-p[1]] for p in feat]
  #feat2= [None]*18; feat2[:9]= feat[9:]; feat2[9:]= feat[:9]; feat= feat2

  def write_polygon(fp,polygon,closed=False):
    if len(polygon)>0:
      for pt in polygon+[polygon[0]] if closed else polygon:
        fp.write('%s\n'%' '.join(map(str,pt)))
    fp.write('\n')

  with open('/tmp/polygons.dat','w') as fp:
    write_polygon(fp,polygon)
  with open('/tmp/feat.dat','w') as fp:
    write_polygon(fp,feat[:len(feat)//2],False)
    write_polygon(fp,feat[len(feat)//2:],False)

def PlotGraphs():
  print('Plotting graphs..')
  import os
  commands=[
    '''qplot -x2 aaa
        -s 'set size ratio -1;set xtics 0.02;set xrange [-0.0225:0.0225];'
        /tmp/polygons.dat u 1:2:'(column(-1)+1)' lc var w l
        /tmp/feat.dat u 1:2:'(column(-1)+2)' ps 1 pt 6 lc var w p
        &''',
        # -o plan_2d_feat-1.svg
        #/tmp/polygons.dat u 1:2:-1 lc var w l
    '''''',
    '''''',
    ]
  for cmd in commands:
    if cmd!='':
      cmd= ' '.join(cmd.splitlines())
      print('###',cmd)
      os.system(cmd)

  print('##########################')
  print('###Press enter to close###')
  print('##########################')
  input()
  os.system('qplot -x2kill aaa')

if __name__=='__main__':
  import sys
  if len(sys.argv)>1 and sys.argv[1] in ('p','plot','Plot','PLOT'):
    PlotGraphs()
    sys.exit(0)
  Main()
