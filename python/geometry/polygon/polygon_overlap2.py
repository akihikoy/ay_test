#!/usr/bin/python3
#\file    polygon_overlap2.py
#\brief   Check if two polygons overlap.
#\author  Akihiko Yamaguchi, info@akihikoy.net
#\version 0.1
#\date    Mar.08, 2024

import numpy as np
from polygon_clip3 import ClipPolygon
from polygon_convexhull import ConvexHull
from polygon_area import PolygonArea

#Checks if two polygons (points1, points2) overlap.
#  NOTE: ClipPolygon based on Sutherland-Hodgman-Algorithm is used,
#    which assumes points2 to be a convex polygon (points1 is an arbitrary polygon).
def PolygonOverlap(points1, points2):
  points2= ConvexHull(points2)
  intersection= ClipPolygon(points1, points2)
  return PolygonArea(intersection)>0


from cv2 import fillPoly as cv2_fillPoly, bitwise_and as cv2_bitwise_and

#Checks if two polygons (points1, points2) overlap with OpenCV.
#  NOTE: Polygons are converted to polygons in images, which looses the accuracy.
#    The accuracy depends on resolution, but larger resolution increases the computation cost.
#  Sometimes this is faster than PolygonOverlap especially when the size of polygons are large.
def PolygonOverlapCV(points1, points2, resolution=100):
  pts= np.vstack((points1, points2))
  offset= np.min(pts,axis=0)
  scale= resolution/(np.max(pts,axis=0)-offset)
  points1_int= ((points1-offset) * scale).astype(np.int32)
  points2_int= ((points2-offset) * scale).astype(np.int32)
  points1_img= np.zeros((resolution,resolution), dtype='uint8')
  points2_img= np.zeros((resolution,resolution), dtype='uint8')
  cv2_fillPoly(points1_img, [points1_int.reshape(-1,1,2)], 1)
  cv2_fillPoly(points2_img, [points2_int.reshape(-1,1,2)], 1)
  intersection= cv2_bitwise_and(points1_img, points2_img)
  return np.any(intersection>0)


if __name__=='__main__':
  import matplotlib.pyplot as plt
  import time

  polygons_3d=[
    [[0.4890847929408275, 0.18549366907880044, 0.038], [0.4927499283266357, 0.1932138212269013, 0.038], [0.4931219182234037, 0.20575910049596338, 0.038], [0.49039166900482534, 0.2180261247493042, 0.038], [0.49050982083240846, 0.24285013281896015, 0.038], [0.48865605312024707, 0.24884399391412643, 0.038], [0.48661454521372144, 0.28341205540036635, 0.038], [0.4837618040847819, 0.2972275481395044, 0.038], [0.48355744719133265, 0.312095827952634, 0.038], [0.481218030782869, 0.31522901528100117, 0.038], [0.48040819117362576, 0.32800831887472864, 0.038], [0.4792481387607772, 0.32872313781790696, 0.038], [0.4803721467515663, 0.33773248992870025, 0.038], [0.478201044138594, 0.34361058116180965, 0.038], [0.47736250978792416, 0.3597482539079, 0.038], [0.4748948380568634, 0.3677379734709878, 0.038], [0.4753447310866703, 0.38309329844370554, 0.038], [0.47319699582612995, 0.3918715409187463, 0.038], [0.4757433418326783, 0.4090184229738445, 0.038], [0.46846331881356257, 0.4292107006407166, 0.038], [0.4691950940561934, 0.4376507075942838, 0.038], [0.4675905487924642, 0.4392441326218603, 0.038], [0.46704890072165617, 0.45011652390618434, 0.038], [0.4600855107802071, 0.45780410287942985, 0.038], [0.45544050681085557, 0.4573541138927606, 0.038], [0.4531555704913369, 0.45198539512897445, 0.038], [0.42555720899585897, 0.4527372418282773, 0.038], [0.4191616295978692, 0.4495070133044608, 0.038], [0.41368912334298646, 0.45076296006290295, 0.038], [0.41255402859820745, 0.443489447593857, 0.038], [0.3981166712590216, 0.4450384792162528, 0.038], [0.39441421165026286, 0.449081242649572, 0.038], [0.39330025404670943, 0.44662444939488377, 0.038], [0.38284017436413703, 0.4453170847707619, 0.038], [0.38150981236518555, 0.4416936557424619, 0.038], [0.3687279566674819, 0.4432425411037704, 0.038], [0.3639547510643159, 0.4384303351682677, 0.038], [0.34112027283426294, 0.44286329707268, 0.038], [0.3398208326536921, 0.4392253564101187, 0.038], [0.3350065741303879, 0.4375991591063875, 0.038], [0.3186350351732119, 0.44324712360302554, 0.038], [0.30731962686796455, 0.4432036793199829, 0.038], [0.30604461006597233, 0.4395512020731053, 0.038], [0.2943997223674003, 0.4399191406470328, 0.038], [0.2931376903940518, 0.43626996444404753, 0.038], [0.28506337894005623, 0.4362389640008714, 0.038], [0.2848692946265745, 0.43138195401540935, 0.038], [0.27933005575245773, 0.4321729776630115, 0.038], [0.29154560154096704, 0.39816577125147945, 0.038], [0.2909755621201566, 0.39890658549396046, 0.038], [0.2748818776057024, 0.385156654549378, 0.038], [0.27652066621347454, 0.3835292234998715, 0.038], [0.2772795150854695, 0.3697833608502493, 0.038], [0.27986485511171144, 0.3623036641421395, 0.038], [0.2839666697904878, 0.3241558247590052, 0.038], [0.28989212968015765, 0.3216710416326078, 0.038], [0.2888792953577779, 0.31765279900974136, 0.038], [0.2838919707769725, 0.3174324361341892, 0.038], [0.2843298657694698, 0.29259365307876456, 0.038], [0.28666223384350054, 0.2904459499124081, 0.038], [0.28671673431115813, 0.2757426521552744, 0.038], [0.2917057674246847, 0.25125596199724326, 0.038], [0.2951335138187966, 0.22252986880226722, 0.038], [0.3017940299060674, 0.20453012508962726, 0.038], [0.30535453092634157, 0.20115143170802646, 0.038], [0.30013622998425615, 0.17522547220463613, 0.038], [0.3115892325885809, 0.17291359837463033, 0.038], [0.31487286541164267, 0.16802503652482467, 0.038], [0.3240667164144693, 0.16506223153341618, 0.038], [0.3285429132895346, 0.1678016765950334, 0.038], [0.40462191287019644, 0.1738935375147904, 0.038], [0.4062372601716409, 0.17552208330103378, 0.038], [0.4313659077763964, 0.177831609326638, 0.038], [0.4329877294157224, 0.1794666823505016, 0.038], [0.44382243878665417, 0.17832246243118405, 0.038], [0.44600456524787024, 0.18114550529557996, 0.038], [0.477324340445356, 0.1824731706419419, 0.038], [0.48104819764767814, 0.18530863519442115, 0.038]],
    [[0.48836559593143475, 0.1862318273464193, 0.038], [0.4916265366343599, 0.19447798617882767, 0.038], [0.49137069046020887, 0.23829932946315222, 0.038], [0.4900238351066342, 0.23950410761529198, 0.038], [0.4896824559790341, 0.2545813098255935, 0.038], [0.4879033537388493, 0.2564290298004838, 0.038], [0.48617112949702196, 0.2841403998933944, 0.038], [0.48360895008249444, 0.29746495947821583, 0.038], [0.48324219773913013, 0.3158810364532117, 0.038], [0.4812034582590685, 0.318424168166973, 0.038], [0.4803695287803178, 0.33770250818226155, 0.038], [0.4783553414025901, 0.34326446412353556, 0.038], [0.47621918713947436, 0.35871978823128126, 0.038], [0.47348149088092945, 0.35771517282511694, 0.038], [0.47058630312972166, 0.36025024543390327, 0.038], [0.47217195170424103, 0.3650697202301882, 0.038], [0.47651251438724357, 0.36449553451828426, 0.038], [0.4753729845976568, 0.36668647253901526, 0.038], [0.4748087069311943, 0.3902384181384654, 0.038], [0.473513789759959, 0.3969957099098397, 0.038], [0.4749339168788362, 0.40780064400536314, 0.038], [0.4733538311465663, 0.4093697790172755, 0.038], [0.46654020911421, 0.4513615569976222, 0.038], [0.4581208522304837, 0.458630898086322, 0.038], [0.45364943740497016, 0.4577494205786697, 0.038], [0.45260297826234647, 0.45324001323888996, 0.038], [0.44056034462192034, 0.451478161622543, 0.038], [0.43896927608753167, 0.4498740929773754, 0.038], [0.42437786107679476, 0.4518449345395708, 0.038], [0.4214082917397071, 0.4482087095723644, 0.038], [0.4163966382651944, 0.44861512048993135, 0.038], [0.41116156681743576, 0.44624065284568026, 0.038], [0.39834664352787497, 0.44619145133747634, 0.038], [0.39673883699328455, 0.44778811503380805, 0.038], [0.39514885382888004, 0.4445763370755681, 0.038], [0.390830637349359, 0.44531779159181345, 0.038], [0.38789516071931146, 0.44168819989996055, 0.038], [0.37854510879117464, 0.4387182497272889, 0.038], [0.37379413172469855, 0.43711342812118, 0.038], [0.3730235248722538, 0.4326944876127557, 0.038], [0.36587779690343636, 0.43390987272235065, 0.038], [0.36130724678612325, 0.43915310929287726, 0.038], [0.3597194154206753, 0.4375523042665198, 0.038], [0.3427260187140116, 0.4428394904648217, 0.038], [0.34041814827090844, 0.4367646688486598, 0.038], [0.32865006416591136, 0.4396080215675598, 0.038], [0.31930429423852186, 0.44446741859786454, 0.038], [0.31768894693707733, 0.44283887281162115, 0.038], [0.3040840350952168, 0.4431612849212463, 0.038], [0.30347772473957696, 0.43868607938551074, 0.038], [0.29796768064072826, 0.43949021988349046, 0.038], [0.2961132931616743, 0.4346138305838783, 0.038], [0.28485474620469453, 0.4345706046138158, 0.038], [0.2816499489533318, 0.43133962199181, 0.038], [0.28815288977931075, 0.41100597338424744, 0.038], [0.2934489642371984, 0.3993137890085926, 0.038], [0.27487925963445387, 0.3851266728029393, 0.038], [0.27651804824222603, 0.3834992417534328, 0.038], [0.2755069607685417, 0.3698054642455466, 0.038], [0.27986223714046293, 0.3622736823957008, 0.038], [0.2839640518192393, 0.3241258430125665, 0.038], [0.29083006088461116, 0.32222937867368967, 0.038], [0.29084817347784264, 0.3173429095683337, 0.038], [0.2842423005795328, 0.3154809838563802, 0.038], [0.28432724779822127, 0.29256367133232586, 0.038], [0.286659615872252, 0.2904159681659694, 0.038], [0.28602390660315424, 0.2762004435628864, 0.038], [0.2889843838147782, 0.2682640226352331, 0.038], [0.287671961803379, 0.25440139861932964, 0.038], [0.2900024461718143, 0.25232358880678685, 0.038], [0.3031318284888577, 0.2037975434125023, 0.038], [0.30634150043464325, 0.20220702990469602, 0.038], [0.30078775792716156, 0.17654775240989207, 0.038], [0.310591799508167, 0.174224670787789, 0.038], [0.33016977909863965, 0.16777795107485335, 0.038], [0.3576233013304112, 0.17036135215005122, 0.038], [0.361350784515071, 0.17008681406117793, 0.038], [0.40392196853664786, 0.17328317974677057, 0.038], [0.4053014514926058, 0.17505036785052153, 0.038], [0.416502201674596, 0.17626177410161348, 0.038], [0.4337857477622981, 0.17884256870743329, 0.038], [0.4431391147865157, 0.17755148784671732, 0.038], [0.4469377884032826, 0.18036448131834887, 0.038], [0.4768576943951411, 0.18289418848480166, 0.038], [0.47925653398894213, 0.18542596284939805, 0.038]],
    ]
  polygons= [[[x,y] for (x,y,z) in poly] for poly in polygons_3d]

  polygon1,polygon2= np.array(polygons[0]),np.array(polygons[1])
  #polygon2= polygon2+0.17  #Intersect
  polygon2= polygon2+0.18  #Intersect
  #polygon2= polygon2+0.182  #Not intersect
  #polygon2= polygon2+0.184  #Not intersect
  #polygon2= polygon2+0.185  #Not intersect
  #polygon2= polygon2+0.19  #Not intersect

  t_start= time.time()
  res= PolygonOverlap(polygon1,polygon2)
  t_end= time.time()
  print('PolygonOverlap(polygon1,polygon2)= {}'.format(res))
  print('  comp time: {:.3f} ms'.format((t_end-t_start)*1e3))

  t_start= time.time()
  res= PolygonOverlapCV(polygon1,polygon2)
  t_end= time.time()
  print('PolygonOverlapCV(polygon1,polygon2)= {}'.format(res))
  print('  comp time: {:.3f} ms'.format((t_end-t_start)*1e3))

  fig= plt.figure()
  ax= fig.add_subplot(1,1,1)
  def plotpoly(poly, **kwargs):
    poly= list(poly)
    poly= poly+[poly[0]]
    return ax.plot(np.array(poly)[:,0], np.array(poly)[:,1], **kwargs)
  plotpoly(polygon1, color='blue',  label='polygon1')
  plotpoly(polygon2, color='red',  label='polygon2')
  ax.set_xlabel('x')
  ax.set_ylabel('y')
  ax.grid(True)
  plt.show()
