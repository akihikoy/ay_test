#!/usr/bin/python3
#\file    least_sq_lin2.py
#\brief   Least square for linear features.
#\author  Akihiko Yamaguchi, info@akihikoy.net
#\version 0.1
#\date    Mar.16, 2021

import numpy as np
import numpy.linalg as la
import itertools
import math
import random
import time


def GetLinearWeightByLeastSq(data_x, data_f, f_reg=1e-8):
  X= np.array(data_x)
  V= np.array(data_f)
  Theta= np.vstack((np.ones(len(X)),X)).T
  w= la.inv(Theta.T.dot(Theta)+f_reg*np.eye(Theta.shape[1])).dot(Theta.T).dot(V)
  return w

if __name__=='__main__':

  #data= [[0.0408958582598, 0.137360546361], [0.0327694393256, 0.116496139529], [0.0250197922576, 0.0871037422371], [0.0369696390811, 0.145267724947], [0.0403794864107, 0.0988302238304], [0.0297410464294, 0.0741732628348], [0.0159446057126, 0.0492573528685], [-0.00526590967013, 0.0420526621249], [-0.0292201398055, 0.0455263708492], [-0.052738091929, 0.0491888108931], [-0.0757820089539, 0.0530237302089], [-0.0984923153168, 0.05089980449], [0.0329577458374, 0.153347576501], [0.0564548878277, 0.0615149844671], [0.0357946698362, 0.0575943558297], [0.0197572434543, 0.0365266887975], [-0.00463724155677, 0.0393583706506], [-0.0292323429736, 0.0455872412016], [-0.0534472673354, 0.0560684737503], [-0.076255863735, 0.0657130582709], [-0.0983227014336, 0.0569484243862], [0.0383977625228, 0.142387918945], [0.0653124134495, 0.0409527747189], [0.0452440776828, 0.0317170273135], [0.023353614835, 0.0245174817009], [-0.00320212089827, 0.0332174817088], [-0.0291110049414, 0.0448550290626], [-0.0547244406821, 0.06847583448], [-0.0767556025641, 0.0791034639278], [-0.0978873953655, 0.0723313804914]]
  #data= [[0.0286511538521, 0.137360546361], [0.0323568001978, 0.116496139529], [0.0375766529031, 0.0871037422371], [0.0106080063012, 0.145267724947], [0.0157985678661, 0.0988302238304], [0.0185559686398, 0.0741732628348], [0.0213426615138, 0.0492573528685], [0.0221503487976, 0.0420526621249], [0.0217646703741, 0.0455263708492], [0.0213578471573, 0.0491888108931], [0.020931691718, 0.0530237302089], [0.0211715988359, 0.05089980449], [-0.00640309971799, 0.153347576501], [-0.00218099833466, 0.0615149844671], [-0.00199843932278, 0.0575943558297], [-0.0010275519628, 0.0365266887975], [-0.001155224229, 0.0393583706506], [-0.00143915697816, 0.0455872412016], [-0.00191875275412, 0.0560684737503], [-0.00236000954231, 0.0657130582709], [-0.00195446081085, 0.0569484243862], [-0.0227290220323, 0.142387918945], [-0.0247379546337, 0.0409527747189], [-0.0249185464716, 0.0317170273135], [-0.0250586789082, 0.0245174817009], [-0.0248838732826, 0.0332174817088], [-0.0246510363887, 0.0448550290626], [-0.0241812284197, 0.06847583448], [-0.0239687654204, 0.0791034639278], [-0.0241005218917, 0.0723313804914]]
  data= [[0.10520619867, 0.0308487575808], [0.0795642840747, 0.0398753771943], [0.0557979638447, 0.0421799513597], [0.0325352811066, 0.0390745361758], [0.0093618689768, 0.0534539021205], [-0.0126089891848, 0.0605549088727], [-0.0341523329999, 0.0644969558955], [-0.0570207190213, 0.0602600954432], [-0.0821851018689, 0.0500411229871], [-0.104274935309, 0.0522088080319], [0.106590028412, 0.0249362079543], [0.0801712308136, 0.0362726998284], [0.0561864848019, 0.0384035347889], [0.0322291833033, 0.0473125025092], [0.00960654048395, 0.062050215563], [-0.0121959578479, 0.0649422900204], [-0.0335609034961, 0.068198096176], [-0.0559436065941, 0.0650389110388], [-0.0823321377739, 0.0495328709809], [-0.104835512286, 0.0506337833771], [0.0804745977053, 0.0344725058646], [0.0561780894503, 0.0384877366192], [0.0320707308717, 0.0515811743146], [0.00968258855905, 0.0647121652728], [-0.0121012408574, 0.0659443287204], [-0.0340577958888, 0.065081778598], [-0.0570500052263, 0.0601239998802], [-0.0832063252328, 0.0465246084218], [-0.106742952472, 0.0452804306044], [0.0559592274869, 0.0406190042926], [0.032159358904, 0.0492080217478], [0.0095800582026, 0.0610885645766], [-0.0123329523284, 0.0634745620618], [-0.0359875548743, 0.0529894330358], [-0.0601539935525, 0.0463405158089], [-0.0823386183639, 0.049505111442]]
  #data= [[0.0326539627489, 0.0308487575808], [0.0322366633693, 0.0398753771943], [0.0321298334376, 0.0421799513597], [0.0322728564162, 0.0390745361758], [0.031608397744, 0.0534539021205], [0.031280088906, 0.0605549088727], [0.0310976745198, 0.0644969558955], [0.0312929566035, 0.0602600954432], [0.031764466284, 0.0500411229871], [0.0316639863866, 0.0522088080319], [0.00835444317533, 0.0249362079543], [0.00857617033565, 0.0362726998284], [0.00861751583278, 0.0384035347889], [0.00879170815443, 0.0473125025092], [0.00908016275757, 0.062050215563], [0.00913646594716, 0.0649422900204], [0.00919990561918, 0.068198096176], [0.00913759853945, 0.0650389110388], [0.00883323261929, 0.0495328709809], [0.00885441817469, 0.0506337833771], [-0.0154042187427, 0.0344725058646], [-0.0150618346867, 0.0384877366192], [-0.0139443495157, 0.0515811743146], [-0.0128236271569, 0.0647121652728], [-0.0127188163683, 0.0659443287204], [-0.0127928554217, 0.065081778598], [-0.0132165638839, 0.0601239998802], [-0.0143781504786, 0.0465246084218], [-0.0144848013103, 0.0452804306044], [-0.0384204890594, 0.0406190042926], [-0.0371226116149, 0.0492080217478], [-0.0353271635326, 0.0610885645766], [-0.03496690157, 0.0634745620618], [-0.0365522754332, 0.0529894330358], [-0.0375577757977, 0.0463405158089], [-0.0370798257279, 0.049505111442]]
  data= np.array(data)

  t0= time.time()
  w= GetLinearWeightByLeastSq(data[:,0],data[:,1])
  #w= np.flip(np.polyfit(data[:,0],data[:,1],2))
  print('Computation time[ms]:',(time.time()-t0)*1000.)
  print(w)


  fp= open('/tmp/data.dat','w')
  for x,f in data:
    fp.write('%f %f\n' % (x, f))

  fp= open('/tmp/approx.dat','w')
  for x in np.linspace(np.min(data[:,0]),np.max(data[:,0]),200):
    f= w.T.dot([1.0,x])
    fp.write('%f %f\n' % (x, f))

  print('qplot -x /tmp/approx.dat w l /tmp/data.dat')

