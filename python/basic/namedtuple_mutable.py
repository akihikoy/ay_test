#!/usr/bin/python
#WARNING: It does not work

#import collections
import operator

#Class Point was generated by:
#  collections.namedtuple('Point', ['X','Y'], verbose=True)
#Then,
#  replace  _property --> property
#  replace  _itemgetter --> operator.itemgetter
#  replace  _tuple --> tuple
#  replace  tuple --> list
class Point():
    'Point(X, Y)'

    __slots__ = ()

    _fields = ('X', 'Y')
    _values = []

    def __init__(self, X, Y):
        'Create new instance of Point(X, Y)'
        self._values= [X,Y]

    @classmethod
    def _make(cls, iterable, new=list.__new__, len=len):
        'Make a new Point object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != 2:
            raise TypeError('Expected 2 arguments, got %d' % len(result))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        return 'Point(X=%r, Y=%r)' % tuple(self._values)

    #def _asdict(self):
        #'Return a new OrderedDict which maps field names to their values'
        #return OrderedDict(zip(self._fields, self))

    #def _replace(_self, **kwds):
        #'Return a new Point object replacing specified fields with new values'
        #result = _self._make(map(kwds.pop, ('X', 'Y'), _self))
        #if kwds:
            #raise ValueError('Got unexpected field names: %r' % kwds.keys())
        #return result

    #def __getnewargs__(self):
        #'Return self as a plain list.  Used by copy and pickle.'
        #return list(self)

    #__dict__ = property(_asdict)

    #def __getstate__(self):
        #'Exclude the OrderedDict from pickling'
        #pass

    def __getitem__(self, key):
        return self._values[key]

    X = property(operator.itemgetter(0), doc='Alias for field number 0')

    Y = property(operator.itemgetter(1), doc='Alias for field number 1')


a= Point(2.5,-0.5)
a.X= 2.9
a.Y= -0.5

b= Point(0,0)
#b.X= 1.1
#b.Y= 0.0

import copy
c= copy.deepcopy(a)
c.X= 100

print 'a=',a
print 'b=',b
print 'c=',c
print 'a.X=',a.X
print 'a[1]=',a[1]
print 'list(a)=',list(a)
print 'a+b=',a+b


