//-------------------------------------------------------------------------------------------
/*! \file    angled_rect_3d.cpp
    \brief   Compute an angled rect of a 3D polygon.
    \author  Akihiko Yamaguchi, info@akihikoy.net
    \version 0.1
    \date    Apr.11, 2023

g++ -g -Wall -O2 -o angled_rect_3d.out angled_rect_3d.cpp -lopencv_core -lopencv_imgproc
*/
//-------------------------------------------------------------------------------------------
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <fstream>
//-------------------------------------------------------------------------------------------
// #define print(var) PrintContainer((var), #var"= ")
#define print(var) std::cout<<#var"= "<<(var)<<std::endl
//-------------------------------------------------------------------------------------------

int main(int argc, char**argv)
{
  /* Get the example polygon by:
   * $ rostopic echo '/grasp_plan/object_list[5]'
   * >>> pts=[...]
   * >>> for i in range(len(pts)/3): print '{{{:.4f},{:.4f},{:.4f}}},'.format(*pts[3*i:3*i+3]),
   * */
//   float points[][3]= {{0.0341453,-0.0913219,0.986689},{0.032528,-0.0913194,0.986662},{0.0292936,-0.0913144,0.986608},{0.0276746,-0.0896856,0.98651},{0.0276746,-0.0896856,0.98651},{0.0244375,-0.0864288,0.986313},{0.0228194,-0.0848009,0.986215},{0.0228194,-0.0848009,0.986215},{0.0212001,-0.0815484,0.986046},{0.0212001,-0.0815484,0.986046},{0.0179658,-0.0782948,0.98585},{0.0179658,-0.0782948,0.98585},{0.0163479,-0.0750445,0.985681},{0.0163479,-0.0750445,0.985681},{0.0147317,-0.0734188,0.985583},{0.0147317,-0.0734188,0.985583},{0.0131158,-0.0717934,0.985485},{0.0131149,-0.0701703,0.985414},{0.0131149,-0.0701703,0.985414},{0.0131139,-0.0685474,0.985343},{0.0114986,-0.0669229,0.985245},{0.0114986,-0.0669229,0.985245},{0.0114977,-0.0653005,0.985174},{0.0114977,-0.0653005,0.985174},{0.0098828,-0.0636766,0.985076},{0.0098828,-0.0636766,0.985076},{0.00988209,-0.0620547,0.985005},{0.00988138,-0.060433,0.984934},{0.00826701,-0.05881,0.984836},{0.00826642,-0.0571889,0.984765},{0.00665297,-0.0571873,0.984738},{0.00665201,-0.0539458,0.984596},{0.00665057,-0.0490853,0.984384},{0.00826285,-0.047467,0.98434},{0.00826225,-0.0458474,0.984269},{0.00987427,-0.0442294,0.984225},{0.00987356,-0.0426103,0.984154},{0.00987284,-0.0409914,0.984083},{0.00987213,-0.0393728,0.984012},{0.0114837,-0.0377555,0.983968},{0.0114837,-0.0377555,0.983968},{0.013095,-0.0361383,0.983924},{0.013095,-0.0361383,0.983924},{0.0163174,-0.0329043,0.983836},{0.017927,-0.0296701,0.983722},{0.0195391,-0.0296709,0.983749},{0.0227603,-0.026438,0.983661},{0.0243724,-0.0264388,0.983688},{0.0243724,-0.0264388,0.983688},{0.0259846,-0.0264395,0.983715},{0.0275949,-0.0248232,0.983671},{0.0292072,-0.0248239,0.983698},{0.0292051,-0.0232071,0.983627},{0.0308173,-0.0232077,0.983654},{0.0324273,-0.0215916,0.98361},{0.0340396,-0.0215922,0.983637},{0.035652,-0.0215928,0.983663},{0.0372645,-0.0215934,0.98369},{0.0388743,-0.0199774,0.983646},{0.0388743,-0.0199774,0.983646},{0.0404839,-0.0183615,0.983602},{0.043709,-0.0183625,0.983656},{0.0485474,-0.018364,0.983737},{0.0485509,-0.0199807,0.983808},{0.0501639,-0.0199812,0.983835},{0.0517808,-0.0215987,0.983932},{0.0550076,-0.0215999,0.983986},{0.0582348,-0.0216011,0.98404},{0.0614623,-0.0216023,0.984093},{0.0630762,-0.0216029,0.98412},{0.0630762,-0.0216029,0.98412},{0.0646948,-0.023221,0.984218},{0.066309,-0.0232216,0.984245},{0.0663138,-0.0248395,0.984316},{0.0679282,-0.0248402,0.984343},{0.0695477,-0.026459,0.984441},{0.0711623,-0.0264597,0.984467},{0.0744027,-0.0296985,0.984663},{0.074408,-0.0313174,0.984734},{0.0760288,-0.0329376,0.984832},{0.0760398,-0.0361768,0.984974},{0.0760452,-0.0377968,0.985045},{0.0776611,-0.0377978,0.985072},{0.0776667,-0.0394181,0.985143},{0.0776667,-0.0394181,0.985143},{0.0776723,-0.0410385,0.985214},{0.0792885,-0.0410397,0.985241},{0.0792999,-0.0442814,0.985383},{0.0792999,-0.0442814,0.985383},{0.0793113,-0.0475241,0.985525},{0.080928,-0.0475254,0.985552},{0.0809339,-0.0491471,0.985623},{0.0809397,-0.0507691,0.985694},{0.0809572,-0.0556364,0.985907},{0.0809689,-0.0588825,0.986049},{0.0809864,-0.0637533,0.986263},{0.0793743,-0.0653756,0.986307},{0.07938,-0.0669999,0.986378},{0.07938,-0.0669999,0.986378},{0.0793914,-0.0702491,0.98652},{0.0761605,-0.0718701,0.986537},{0.076166,-0.0734952,0.986608},{0.0761715,-0.0751206,0.98668},{0.0761715,-0.0751206,0.98668},{0.0729452,-0.0783677,0.986768},{0.0713318,-0.0799915,0.986812},{0.071337,-0.0816176,0.986883},{0.0681096,-0.084866,0.986972},{0.0664957,-0.0864904,0.987016},{0.064877,-0.086488,0.986989},{0.064877,-0.086488,0.986989},{0.0632583,-0.0864857,0.986962},{0.0616442,-0.0881101,0.987006},{0.0600256,-0.0881077,0.986979},{0.06003,-0.0897347,0.98705},{0.0567928,-0.0897298,0.986996},{0.0551744,-0.0897274,0.986969},{0.053556,-0.0897249,0.986942},{0.0519415,-0.0913495,0.986986},{0.0487051,-0.0913445,0.986932},{0.047087,-0.0913419,0.986905},{0.047087,-0.0913419,0.986905},{0.0422332,-0.0913344,0.986824},{0.0389977,-0.0913294,0.98677}};
//   cv::Vec3f normal(0.0166263, -0.0437018, -0.998906);
//   float points[][3]= {{-0.0338,-0.2109,0.9024}, {-0.0353,-0.2109,0.9022}, {-0.0382,-0.2108,0.9019}, {-0.0383,-0.2083,0.9039}, {-0.0384,-0.2071,0.9049}, {-0.0384,-0.2058,0.9060}, {-0.0370,-0.2046,0.9072}, {-0.0370,-0.2034,0.9082}, {-0.0370,-0.2034,0.9082}, {-0.0371,-0.2021,0.9092}, {-0.0356,-0.2021,0.9094}, {-0.0356,-0.2009,0.9104}, {-0.0356,-0.2009,0.9104}, {-0.0357,-0.1996,0.9115}, {-0.0342,-0.1984,0.9127}, {-0.0342,-0.1984,0.9127}, {-0.0328,-0.1971,0.9139}, {-0.0328,-0.1971,0.9139}, {-0.0298,-0.1946,0.9163}, {-0.0283,-0.1947,0.9165}, {-0.0269,-0.1934,0.9178}, {-0.0224,-0.1935,0.9183}, {-0.0179,-0.1937,0.9188}, {-0.0149,-0.1937,0.9192}, {-0.0104,-0.1938,0.9197}, {-0.0073,-0.1965,0.9179}, {-0.0073,-0.1965,0.9179}, {-0.0043,-0.1991,0.9162}, {-0.0043,-0.1991,0.9162}, {-0.0028,-0.2017,0.9143}, {-0.0028,-0.2017,0.9143}, {-0.0013,-0.2030,0.9134}, {-0.0013,-0.2055,0.9113}, {-0.0013,-0.2093,0.9082}, {-0.0013,-0.2106,0.9072}, {-0.0013,-0.2106,0.9072}, {-0.0028,-0.2118,0.9060}, {-0.0043,-0.2117,0.9058}, {-0.0043,-0.2117,0.9058}, {-0.0072,-0.2117,0.9055}, {-0.0072,-0.2117,0.9055}, {-0.0117,-0.2115,0.9049}, {-0.0146,-0.2115,0.9046}, {-0.0191,-0.2113,0.9041}, {-0.0220,-0.2113,0.9037}, {-0.0265,-0.2111,0.9032}, {-0.0265,-0.2111,0.9032}, {-0.0294,-0.2111,0.9029}};
//   cv::Vec3f normal(0.10588503628969193, 0.6321910619735718, -0.767543375492096);
  float points[][3]= {{-0.0230,-0.1850,0.9438}, {-0.0230,-0.1836,0.9445}, {-0.0246,-0.1836,0.9445}, {-0.0261,-0.1835,0.9444}, {-0.0261,-0.1835,0.9444}, {-0.0277,-0.1821,0.9451}, {-0.0277,-0.1821,0.9451}, {-0.0292,-0.1821,0.9450}, {-0.0308,-0.1821,0.9450}, {-0.0308,-0.1807,0.9457}, {-0.0323,-0.1807,0.9457}, {-0.0355,-0.1778,0.9471}, {-0.0371,-0.1764,0.9477}, {-0.0371,-0.1750,0.9485}, {-0.0402,-0.1736,0.9491}, {-0.0403,-0.1721,0.9499}, {-0.0403,-0.1721,0.9499}, {-0.0403,-0.1707,0.9506}, {-0.0419,-0.1693,0.9513}, {-0.0419,-0.1693,0.9513}, {-0.0435,-0.1678,0.9520}, {-0.0435,-0.1650,0.9535}, {-0.0435,-0.1650,0.9535}, {-0.0436,-0.1635,0.9543}, {-0.0452,-0.1621,0.9550}, {-0.0452,-0.1621,0.9550}, {-0.0452,-0.1606,0.9558}, {-0.0452,-0.1592,0.9565}, {-0.0469,-0.1578,0.9572}, {-0.0469,-0.1578,0.9572}, {-0.0485,-0.1563,0.9580}, {-0.0485,-0.1548,0.9587}, {-0.0485,-0.1534,0.9595}, {-0.0486,-0.1519,0.9603}, {-0.0501,-0.1519,0.9602}, {-0.0502,-0.1505,0.9610}, {-0.0502,-0.1505,0.9610}, {-0.0502,-0.1490,0.9617}, {-0.0518,-0.1475,0.9625}, {-0.0519,-0.1461,0.9632}, {-0.0535,-0.1446,0.9639}, {-0.0535,-0.1431,0.9647}, {-0.0535,-0.1431,0.9647}, {-0.0536,-0.1417,0.9655}, {-0.0552,-0.1402,0.9662}, {-0.0552,-0.1387,0.9670}, {-0.0569,-0.1372,0.9677}, {-0.0569,-0.1358,0.9685}, {-0.0586,-0.1343,0.9692}, {-0.0586,-0.1343,0.9692}, {-0.0586,-0.1328,0.9700}, {-0.0586,-0.1328,0.9700}, {-0.0602,-0.1313,0.9707}, {-0.0602,-0.1313,0.9707}, {-0.0603,-0.1298,0.9715}, {-0.0603,-0.1298,0.9715}, {-0.0619,-0.1283,0.9723}, {-0.0619,-0.1283,0.9723}, {-0.0620,-0.1268,0.9730}, {-0.0620,-0.1268,0.9730}, {-0.0636,-0.1253,0.9738}, {-0.0637,-0.1238,0.9746}, {-0.0653,-0.1238,0.9745}, {-0.0653,-0.1223,0.9753}, {-0.0653,-0.1223,0.9753}, {-0.0654,-0.1208,0.9761}, {-0.0670,-0.1193,0.9768}, {-0.0670,-0.1193,0.9768}, {-0.0687,-0.1178,0.9776}, {-0.0687,-0.1163,0.9784}, {-0.0703,-0.1162,0.9783}, {-0.0704,-0.1147,0.9791}, {-0.0704,-0.1147,0.9791}, {-0.0704,-0.1132,0.9799}, {-0.0721,-0.1117,0.9806}, {-0.0722,-0.1087,0.9823}, {-0.0707,-0.1071,0.9831}, {-0.0707,-0.1056,0.9839}, {-0.0707,-0.1056,0.9839}, {-0.0708,-0.1041,0.9848}, {-0.0692,-0.1026,0.9856}, {-0.0676,-0.1026,0.9857}, {-0.0645,-0.0995,0.9875}, {-0.0613,-0.0995,0.9876}, {-0.0613,-0.0980,0.9884}, {-0.0581,-0.0980,0.9885}, {-0.0533,-0.0980,0.9887}, {-0.0533,-0.0980,0.9887}, {-0.0500,-0.0980,0.9889}, {-0.0484,-0.0980,0.9889}, {-0.0468,-0.0980,0.9890}, {-0.0452,-0.0980,0.9891}, {-0.0452,-0.0980,0.9891}, {-0.0435,-0.0980,0.9891}, {-0.0435,-0.0980,0.9891}, {-0.0403,-0.0981,0.9892}, {-0.0403,-0.0996,0.9884}, {-0.0387,-0.0996,0.9885}, {-0.0370,-0.0996,0.9886}, {-0.0370,-0.0996,0.9886}, {-0.0354,-0.1012,0.9878}, {-0.0354,-0.1012,0.9878}, {-0.0354,-0.1027,0.9870}, {-0.0338,-0.1027,0.9871}, {-0.0321,-0.1042,0.9863}, {-0.0321,-0.1042,0.9863}, {-0.0321,-0.1058,0.9855}, {-0.0305,-0.1058,0.9856}, {-0.0305,-0.1058,0.9856}, {-0.0305,-0.1073,0.9847}, {-0.0288,-0.1073,0.9848}, {-0.0288,-0.1088,0.9840}, {-0.0288,-0.1088,0.9840}, {-0.0288,-0.1104,0.9832}, {-0.0272,-0.1104,0.9833}, {-0.0271,-0.1134,0.9816}, {-0.0271,-0.1134,0.9816}, {-0.0271,-0.1165,0.9800}, {-0.0255,-0.1180,0.9793}, {-0.0255,-0.1180,0.9793}, {-0.0254,-0.1195,0.9785}, {-0.0254,-0.1210,0.9777}, {-0.0238,-0.1225,0.9770}, {-0.0238,-0.1240,0.9762}, {-0.0238,-0.1255,0.9754}, {-0.0238,-0.1255,0.9754}, {-0.0222,-0.1270,0.9746}, {-0.0222,-0.1270,0.9746}, {-0.0221,-0.1285,0.9738}, {-0.0221,-0.1300,0.9730}, {-0.0205,-0.1300,0.9731}, {-0.0205,-0.1315,0.9723}, {-0.0205,-0.1315,0.9723}, {-0.0205,-0.1330,0.9715}, {-0.0189,-0.1330,0.9716}, {-0.0189,-0.1360,0.9700}, {-0.0189,-0.1360,0.9700}, {-0.0189,-0.1374,0.9692}, {-0.0157,-0.1389,0.9686}, {-0.0141,-0.1404,0.9678}, {-0.0141,-0.1419,0.9671}, {-0.0141,-0.1434,0.9663}, {-0.0141,-0.1434,0.9663}, {-0.0125,-0.1449,0.9656}, {-0.0124,-0.1463,0.9648}, {-0.0109,-0.1463,0.9648}, {-0.0109,-0.1478,0.9641}, {-0.0093,-0.1493,0.9633}, {-0.0093,-0.1507,0.9626}, {-0.0093,-0.1507,0.9626}, {-0.0093,-0.1522,0.9618}, {-0.0077,-0.1537,0.9611}, {-0.0077,-0.1551,0.9603}, {-0.0061,-0.1566,0.9596}, {-0.0061,-0.1566,0.9596}, {-0.0045,-0.1580,0.9589}, {-0.0045,-0.1595,0.9581}, {-0.0029,-0.1609,0.9574}, {-0.0029,-0.1638,0.9559}, {-0.0029,-0.1638,0.9559}, {-0.0029,-0.1667,0.9544}, {-0.0029,-0.1695,0.9528}, {-0.0029,-0.1724,0.9513}, {-0.0029,-0.1724,0.9513}, {-0.0029,-0.1738,0.9506}, {-0.0045,-0.1752,0.9498}, {-0.0045,-0.1767,0.9490}, {-0.0045,-0.1767,0.9490}, {-0.0045,-0.1781,0.9482}, {-0.0076,-0.1795,0.9474}, {-0.0076,-0.1809,0.9466}, {-0.0091,-0.1823,0.9458}, {-0.0091,-0.1823,0.9458}, {-0.0122,-0.1851,0.9442}, {-0.0153,-0.1850,0.9441}, {-0.0199,-0.1850,0.9439}};
  cv::Vec3f normal(0.03746892139315605, 0.4689474105834961, -0.8824309706687927);

  std::vector<cv::Vec3f> poly(sizeof(points)/sizeof(points[0]));
  for(int ip(0),ip_end(poly.size()); ip<ip_end; ++ip)
    poly[ip]= cv::Vec3f(points[ip][0],points[ip][1],points[ip][2]);

  // Compute the center of polygon in 3D as the mean of vertices.
  cv::Scalar center_0= cv::mean(poly);
  cv::Vec3f center(center_0[0],center_0[1],center_0[2]);

  // Shift the polygon center to the origin.
  for(int ip(0),ip_end(poly.size()); ip<ip_end; ++ip)
    poly[ip]-= center;

//   print(normal);
//   for(int ip(0),ip_end(poly.size()); ip<ip_end; ++ip)
//     std::cout<<poly[ip];
//   std::cout<<std::endl;

  // Make axes of a plane perpendicular to normal.
  cv::Vec3f ax1(1.0, 0.0, 0.0), ax2;
  ax1= ax1-ax1.dot(normal)*normal;
  ax2= normal.cross(ax1);

  // Project polygon points onto the plane.
  std::vector<cv::Vec2f> poly2d(poly.size());
  for(int ip(0),ip_end(poly.size()); ip<ip_end; ++ip)
    poly2d[ip]= cv::Vec2f(ax1.dot(poly[ip]),ax2.dot(poly[ip]));

  // Get angled rectangle of poly2d.
  cv::RotatedRect rect= cv::minAreaRect(poly2d);

  // Get 3D rectangle features.
  float width(rect.size.width), length(rect.size.height);  // note: width>=length.
  cv::Vec3f rect_ax_w, rect_ax_l;  // axes aligned to width, length.
  {
    float c(std::cos(-rect.angle/180.*M_PI)), s(std::sin(-rect.angle/180.*M_PI));
    rect_ax_w= (c)*ax1 + (-s)*ax2;
    rect_ax_l= (s)*ax1 + (c)*ax2;
    if(width<length)
    {
      std::swap(width, length);
      std::swap(rect_ax_w, rect_ax_l);
    }
  }

  print(normal);
  print(center);
  // print(cv::mean(poly));
  print(ax1);
  print(ax2);
  print(rect.center);
  print(rect.size);
  print(rect.angle);
  print(width);
  print(length);
  print(rect_ax_w);
  print(rect_ax_l);

  std::vector<cv::Vec2f> rect2d(4);
  {
    float x(rect.center.x), y(rect.center.y), w(rect.size.width), h(rect.size.height);
    float c(std::cos(-rect.angle/180.*M_PI)), s(std::sin(-rect.angle/180.*M_PI));
    rect2d[0]= cv::Vec2f(x+0.5*w*c+0.5*h*s, y-0.5*w*s+0.5*h*c);
    rect2d[1]= cv::Vec2f(x-0.5*w*c+0.5*h*s, y+0.5*w*s+0.5*h*c);
    rect2d[2]= cv::Vec2f(x-0.5*w*c-0.5*h*s, y+0.5*w*s-0.5*h*c);
    rect2d[3]= cv::Vec2f(x+0.5*w*c-0.5*h*s, y-0.5*w*s-0.5*h*c);
  }

  std::vector<cv::Vec3f> poly2d_3d(poly.size());
  for(int ip(0),ip_end(poly2d.size()); ip<ip_end; ++ip)
    poly2d_3d[ip]= poly2d[ip][0]*ax1+poly2d[ip][1]*ax2;
  std::vector<cv::Vec3f> rect2d_3d(rect2d.size());
  for(int ip(0),ip_end(rect2d.size()); ip<ip_end; ++ip)
    rect2d_3d[ip]= rect2d[ip][0]*ax1+rect2d[ip][1]*ax2;

  std::vector<cv::Vec3f> pts_rect_ax_w(2), pts_rect_ax_l(2);
  pts_rect_ax_w[0]= cv::Vec3f(0,0,0);
  pts_rect_ax_w[1]= 0.5*width*rect_ax_w;
  pts_rect_ax_l[0]= cv::Vec3f(0,0,0);
  pts_rect_ax_l[1]= 0.5*length*rect_ax_l;

  #define PRINT_POLY(x_poly, x_dim) \
    for(int ip(0),ip_size(x_poly.size()); ip<ip_size+1; ++ip) \
    { \
      for(int d(0); d<x_dim; ++d) \
        ofs<<(d==0?"":" ")<<x_poly[ip%ip_size][d]; \
      ofs<<std::endl; \
    }
  {
    std::ofstream ofs("/tmp/poly3d.dat");
    PRINT_POLY(poly, 3)
  }
  {
    std::ofstream ofs("/tmp/poly2d.dat");
    PRINT_POLY(poly2d, 2)
  }
  {
    std::ofstream ofs("/tmp/rect2d.dat");
    PRINT_POLY(rect2d, 2)
  }
  {
    std::ofstream ofs("/tmp/poly2d_3d.dat");
    PRINT_POLY(poly2d_3d, 3)
  }
  {
    std::ofstream ofs("/tmp/rect2d_3d.dat");
    PRINT_POLY(rect2d_3d, 3)
  }
  {
    std::ofstream ofs("/tmp/rect_ax_w.dat");
    PRINT_POLY(pts_rect_ax_w, 3)
  }
  {
    std::ofstream ofs("/tmp/rect_ax_l.dat");
    PRINT_POLY(pts_rect_ax_l, 3)
  }

  std::cerr<<"Plot by:"<<std::endl;
  std::cerr<<"qplot -x -3d /tmp/poly3d.dat w lp /tmp/poly2d.dat u 1:2:'(0)' w lp /tmp/rect2d.dat u 1:2:'(0)' w lp /tmp/poly2d_3d.dat w lp /tmp/rect2d_3d.dat w lp /tmp/rect_ax_w.dat w lp /tmp/rect_ax_l.dat w lp"<<std::endl;

  return 0;
}
//-------------------------------------------------------------------------------------------
