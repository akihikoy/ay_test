#!/usr/bin/python
#\file    follow_q_traj1.py
#\brief   Baxter: follow a joint angle trajectory
#\author  Akihiko Yamaguchi, info@akihikoy.net
#\version 0.1
#\date    Oct.08, 2015
'''
NOTE: run beforehand:
  $ rosrun baxter_interface joint_trajectory_action_server.py
'''

import roslib
import rospy
import actionlib
import control_msgs.msg
import trajectory_msgs.msg
import baxter_interface
import time, math, sys, copy

RIGHT=0
LEFT=1
def LRTostr(whicharm):
  if whicharm==RIGHT: return 'right'
  if whicharm==LEFT:  return 'left'
  return None

if __name__=='__main__':
  rospy.init_node('baxter_test')

  rs= baxter_interface.RobotEnable(baxter_interface.CHECK_VERSION)
  init_state= rs.state().enabled
  def clean_shutdown():
    if not init_state:
      print 'Disabling robot...'
      rs.disable()
  rospy.on_shutdown(clean_shutdown)
  rs.enable()

  arm= RIGHT
  limbs= [None,None]
  limbs[RIGHT]= baxter_interface.Limb(LRTostr(RIGHT))
  limbs[LEFT]=  baxter_interface.Limb(LRTostr(LEFT))

  joint_names= [[],[]]
  #joint_names[RIGHT]= ['right_'+joint for joint in ['s0', 's1', 'e0', 'e1', 'w0', 'w1', 'w2']]
  #joint_names[LEFT]=  ['left_' +joint for joint in ['s0', 's1', 'e0', 'e1', 'w0', 'w1', 'w2']]
  joint_names[RIGHT]= limbs[RIGHT].joint_names()
  joint_names[LEFT]=  limbs[LEFT].joint_names()


  client= actionlib.SimpleActionClient('/robot/limb/%s/follow_joint_trajectory'%LRTostr(arm), control_msgs.msg.FollowJointTrajectoryAction)

  # Wait some seconds for the head action server to start or exit
  if not client.wait_for_server(rospy.Duration(5.0)):
    rospy.logerr('Exiting - Joint Trajectory Action Server Not Found')
    rospy.logerr('Run: rosrun baxter_interface joint_trajectory_action_server.py')
    rospy.signal_shutdown('Action Server not found')
    sys.exit(1)

  goal= control_msgs.msg.FollowJointTrajectoryGoal()
  goal.goal_time_tolerance= rospy.Time(0.1)
  goal.trajectory.joint_names= joint_names[arm]
  def add_point(goal, time, positions):
    point= trajectory_msgs.msg.JointTrajectoryPoint()
    point.positions= copy.deepcopy(positions)
    point.time_from_start= rospy.Duration(time)
    goal.trajectory.points.append(point)

  angles= limbs[arm].joint_angles()
  add_point(goal, 0.0, [angles[joint] for joint in joint_names[arm]])
  t0= 4.0
  q0=[0.65, -0.14, 0.05, 1.60, 3.07, 1.42, 3.06]
  add_point(goal, t0, q0)
  #This trajectory was generated by ik1.py
  add_point(goal, t0+0.0, [0.639,-0.139,0.062,1.600,3.061,1.419,3.049]  )
  add_point(goal, t0+0.4, [0.625,-0.244,0.059,1.702,3.053,1.416,3.055]  )
  add_point(goal, t0+0.8, [0.597,-0.331,0.039,1.771,3.021,1.400,3.081]  )
  add_point(goal, t0+1.2, [0.554,-0.385,0.011,1.799,2.968,1.378,3.119]  )
  add_point(goal, t0+1.6, [0.498,-0.396,-0.013,1.781,2.899,1.356,3.158] )
  add_point(goal, t0+2.0, [0.438,-0.364,-0.027,1.720,2.831,1.337,3.190] )
  add_point(goal, t0+2.4, [0.382,-0.293,-0.028,1.626,2.773,1.321,3.212] )
  add_point(goal, t0+2.8, [0.338,-0.196,-0.017,1.511,2.731,1.305,3.218] )
  add_point(goal, t0+3.2, [0.312,-0.086,0.005,1.389,2.706,1.288,3.209]  )
  add_point(goal, t0+3.6, [0.308,0.020,0.032,1.279,2.701,1.275,3.187]   )
  add_point(goal, t0+4.0, [0.327,0.107,0.062,1.201,2.715,1.269,3.153]   )
  add_point(goal, t0+4.4, [0.356,0.159,0.103,1.171,2.739,1.274,3.100]   )
  add_point(goal, t0+4.8, [0.383,0.169,0.157,1.198,2.764,1.291,3.031]   )
  add_point(goal, t0+5.2, [0.406,0.138,0.211,1.275,2.793,1.318,2.957]   )
  add_point(goal, t0+5.6, [0.414,0.075,0.265,1.384,2.819,1.346,2.886]   )
  add_point(goal, t0+6.0, [0.405,-0.010,0.310,1.505,2.842,1.366,2.828]  )
  add_point(goal, t0+6.4, [0.379,-0.106,0.346,1.619,2.855,1.371,2.790]  )

  goal.trajectory.header.stamp= rospy.Time.now()
  client.send_goal(goal)
  #client.cancel_goal()
  client.wait_for_result(timeout=rospy.Duration(20.0))

  print client.get_result()

  rospy.signal_shutdown('Done.')
